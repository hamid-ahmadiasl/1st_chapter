def matrix_cofactors(matrix: list) -> float:
    #return cofactor for squared matrices
    
    def matrix_determinant(matrix: list) -> float:
        #return determinant for squared matrices
    
        det = 0
        n = len(matrix)
        
        # Handle 1x1 matrix
        if n == 1:
            det = matrix[0][0]
            return det
        # Handle 2x2 matrix
        if n == 2:
            det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
            return det
        # Recursive case for n > 2
        for j in range(n):
            sub_matrix = [[matrix[i][k] for k in range(n) if k != j] for i in range(n) if i != 0]
            det += ((-1) ** j) * matrix[0][j] * matrix_determinant(sub_matrix)
        return det

    n = len(matrix)
    
    cofactors = [[0 for _ in range(len(matrix))] for _ in range(len(matrix))]
    for i in range(n):
        for j in range(n):
            minor_matrix = [[matrix[r][c] for c in range(n) if c != j] for r in range(n) if r != i]
            cofactors[i][j] = ((-1) ** (i + j)) * matrix_determinant(minor_matrix)
    return cofactors
    
matrix = [[5, 4, 3, 1], [1, 2, 3, 1], [3, 4, 5, 1], [2, 4, 2, 1]]

print(matrix_cofactors(matrix))
